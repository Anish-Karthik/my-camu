// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ContactInfo {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @unique @db.ObjectId

  userId          String @unique @db.ObjectId
  userContact     User   @relation("userContact", fields: [userId], references: [id])
  fatherContact   User   @relation("fatherContact", fields: [userId], references: [id])
  motherContact   User   @relation(fields: [userId], references: [id], name: "motherContact")
  guardianContact User   @relation(fields: [userId], references: [id], name: "guardianContact")
  
  email           String
  phone           String
  address         String
  city            String
  state           String
  country         String
  zip             String
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username String @unique
  password String

  roleId String?   @db.ObjectId
  role   Role?     @relation(fields: [roleId], references: [id])
  gender String?
  DOB    DateTime?

  userContactInfo     ContactInfo? @relation("userContact")
  fatherContactInfo   ContactInfo? @relation("fatherContact")
  motherContactInfo   ContactInfo? @relation("motherContact")
  guardianContactInfo ContactInfo? @relation("guardianContact")

  headOfclass       Class? @relation("headOfClass")
  assisstantOfClass Class? @relation("assistantOfClass")

  classIds String[] @db.ObjectId
  classes  Class[]  @relation(fields: [classIds], references: [id])

  createdDate DateTime     @default(now())
  updatedDate DateTime     @updatedAt
  attendance  Attendance[]

  sessions Session[]
}

model Content {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  fieldId   String  @unique @db.ObjectId
  field     Fields  @relation(fields: [fieldId], references: [id])
  Value     String
  requestId String  @unique @db.ObjectId
  request   Request @relation(fields: [requestId], references: [id])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  ONDUTY
  UNMARKED
}

enum Type {
  ONE_TO_ONE
  ONE_TO_MANY
  ONE
  CUSTOM
}

enum InputType {
  TEXT
  NUMBER
  EMAIL
  DATETIME
  FILE
}

model Permission {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  user    String
  forward String[]
  formId  String   @unique @db.ObjectId
  form    Form     @relation(fields: [formId], references: [Id])
}

model Role {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  roleName String @unique
  User     User[]
}

model Fields {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  fieldName     String
  fieldType     InputType
  fieldLength   Int
  fieldDesc     String
  fieldOrder    Int
  fieldRequired Boolean
  fieldDefault  String
  fieldFormId   String    @unique @db.ObjectId
  fieldForm     Form      @relation(fields: [fieldFormId], references: [Id])
  fieldContent  Content[]
}

model Form {
  Id           String       @id @default(auto()) @map("_id") @db.ObjectId
  requests     Request[]
  formName     String
  formDesc     String
  formType     Type
  customPerms  Permission[]
  formFields   Fields[]
  degree       Int          @default(10)
  createdDate  DateTime     @default(now())
  updatedDate  DateTime     @default(now())
  forwardLimit Int          @default(1)
  closableBy   String[]
  creatableBy  String[]
}

model Attendance {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  classId    String           @unique @db.ObjectId
  class      Class            @relation(fields: [classId], references: [id])
  date       DateTime
  attendance AttendanceStatus
  userId     String           @unique @db.ObjectId
  user       User             @relation(fields: [userId], references: [id])
}

model Class {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  className           String       @default("Untitled")
  classDesc           String       @default("No Description")
  classStartDate      DateTime
  classEndDate        DateTime
  headOfClass         User         @relation(fields: [headOfClassId], references: [id], name: "headOfClass")
  headOfClassId       String       @unique @db.ObjectId
  assisstantOfClass   User         @relation(fields: [assisstantOfClassId], references: [id], name: "assistantOfClass")
  assisstantOfClassId String       @unique @db.ObjectId
  classMemberIds      String[]     @db.ObjectId
  classMembers        User[]       @relation(fields: [classMemberIds], references: [id])
  attendance          Attendance[]
}

model Request {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  formId      String    @unique @db.ObjectId
  form        Form      @relation(fields: [formId], references: [Id])
  contents    Content[]
  remarks     Query[]
  parentId    String?   @db.ObjectId
  parent      Request?  @relation("childRequests", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childs      Request[] @relation("childRequests")
  statues     String    @default("Pending")
  type        String    @default("Query")
  createdDate DateTime  @default(now())
}

model Query {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  queryTitle String   @default("Untitled")
  queryDesc  String   @default("No Description")
  requestId  String   @unique @db.ObjectId
  request    Request  @relation(fields: [requestId], references: [id])
  mediaIds   String[] @db.ObjectId
  medias     Media[]
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  mimitype    String
  url         String
  mediaTitle  String   @default("Untitled")
  mediaDesc   String   @default("No Description")
  createdDate DateTime @default(now())
  queryId     String   @unique @db.ObjectId
  query       Query    @relation(fields: [queryId], references: [id])
}
